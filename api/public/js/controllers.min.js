/*! apis 2015-05-07 */
function ConsoleCtrl($scope, $http, $location, Swagger, SwaggerValidate, ApiService, Validators, Utility) {
    $scope.errors = [], $scope.api = {}, $scope.method = "GET", $scope.operation = {}, 
    $scope.json = {}, $scope.path = {}, $scope.accessToken = "", $scope.templates = {
        console: "templates/console.html",
        model: "templates/model-values-form.html"
    }, $scope.getEmptyParams = function() {
        return {
            path: {},
            query: {},
            header: {},
            body: {},
            form: {}
        };
    }, $scope.params = $scope.getEmptyParams(), $scope.setJson = function(json) {
        Utility.log("Validating Swagger");
        try {
            Swagger.prepLegacy(json), $scope.errors = SwaggerValidate.validate(json);
        } catch (ex) {
            Utility.log("Validation failed! " + ex.name + " - " + ex.message);
        }
        Swagger.prepSwagger(json), $scope.json = json, $scope.path = _.keys(json.apis)[0], 
        $scope.api = json.apis[$scope.path], $scope.operation = $scope.api.operations[_.keys($scope.api.operations)[0]], 
        $scope.method = $scope.operation.method, _.each($scope.json.models, function(model) {
            model.properties = Utility.arrayToMap(model.properties, "name");
        });
        var flatModels = angular.copy($scope.json.models);
        Swagger.flattenModels(flatModels), $scope.copyRequestModelsToOperations($scope.json.apis, flatModels);
    }, ApiService.getById(ApiService.determineId(), ApiService.determineLoadType()).then(function(json) {
        $scope.setJson(json);
    })["catch"](function(errorThrown) {
        $scope.errors.push(errorThrown.message);
    }), $scope.changePath = function() {
        $scope.api = $scope.json.apis[$scope.path], $scope.changeMethod();
    }, $scope.changeMethod = function() {
        $scope.params = $scope.getEmptyParams(), $scope.api.operations[$scope.method] ? $scope.operation = $scope.api.operations[$scope.method] : ($scope.operation = $scope.api.operations[_.keys($scope.api.operations)[0]], 
        $scope.method = $scope.operation.method);
    }, $scope.copyRequestModelsToOperations = function(apis, models) {
        _.each(apis, function(api) {
            _.each(api.operations, function(operation) {
                $scope.copyRequestModelToOperation(operation, models);
            });
        });
    }, $scope.copyRequestModelToOperation = function(operation, models) {
        if (operation.postDataModel) {
            var model = Swagger.getModelByName(models, operation.postDataModel);
            try {
                operation.request = {
                    model: angular.copy(model)
                };
            } catch (ex) {
                throw console.log(model), ex;
            }
            Swagger.removeModelPropertiesBasedOnUsage(operation.request.model, operation.method, !1);
        }
    }, $scope.makeRequest = function() {
        var type = $scope.method, jsonp = !1, operation = $scope.operation, url = $scope.json.basePath + $scope.path;
        _.each($scope.params.path, function(paramValue, paramName) {
            url = url.replace("{" + paramName + "}", paramValue);
        });
        var authParam = $scope.json.authParameter ? $scope.json.authParameter : "access_token";
        $scope.accessToken && ($scope.params.query[authParam] = $scope.accessToken), _.size($scope.params.query) && (url += "?" + Swagger.parameterString($scope.params.query)), 
        !jsonp || "PUT" !== type && "PATCH" !== type && "DELETE" !== type && "HEAD" !== type || (url += "&method=" + type, 
        type = "POST");
        var settings = {
            url: "proxy.php?__url=" + url,
            type: type,
            success: function(json) {
                $scope.setResponse(json);
            },
            error: function(jqXHR, textStatus, errorThrown) {
            }
        };
        if (Swagger.methodSupportsPostData(operation.method)) {
            var expectations = [];
            Swagger.buildExpectationsFromModelExamples(expectations, [], operation.model), settings.data = Swagger.convertExpectationsToObject(expectations);
        }
        $scope.params.header && _.size($scope.params.header) && (settings.headers = $scope.params.header), 
        ("object" === operation.displayType || "array" === operation.displayType) && (settings.dataType = "json"), 
        $scope.loading = !0, $scope.clearResponse(), $.ajax(settings).always(function() {
            $scope.$apply(function() {
                $scope.loading = !1;
            });
        });
    }, $scope.setResponse = function(json) {
        $("#api-response").removeClass("prettyprinted").html(JSON.stringify(json, null, 4));
    }, $scope.clearResponse = function() {
        $("#api-response").removeClass("prettyprinted").html("");
    }, $scope.validators = Validators;
}

function DesignerCtrl($scope, $http, $location, $anchorScroll, Swagger, SwaggerValidate, SwaggerDiff, ApiDesigner, ApiService, Utility, Validators) {
    function init() {
        vm.templates = {
            design: "templates/designer.html?"
        }, console.log("init"), vm.scrollTo = function(id) {
            $location.hash(id), $anchorScroll();
        }, vm.displayTypes = _.keys(Swagger.typesAndFormats), vm.displayTypesNoObject = _.reject(vm.displayTypes, function(type) {
            return "object" === type;
        }), ApiService.getLocalApis().then(function(apis) {
            vm.localApis = apis;
        }), ApiService.getPublishedApis().then(function(apis) {
            vm.publishedApis = _.filter(apis, function(api) {
                return !api.error;
            });
        }), vm.errors = [], vm.inputJson, vm.previousApiIdx = -1, vm.previousModelIdx = !1, 
        vm.validators = Validators;
        var id = ApiService.determineId();
        id ? ApiService.getById(id, ApiService.determineLoadType()).then(function(json) {
            vm.setJson(json);
        })["catch"](function(errorThrown) {
            vm.clearDesigner(), vm.errors.push(errorThrown.message);
        }) : (console.log("demo"), vm.getDemoJson()), vm.utility = Utility, vm.remove = Utility.remove;
    }
    var vm = this;
    vm.clearDesigner = function() {
        var json = ApiDesigner.blankJson();
        if (vm.api = !1, vm.model = !1, vm.errors = [], vm.setJson(json, !0), !(vm.json.models instanceof Array)) throw new Error("Error!");
    }, vm.getDemoJson = function() {
        $http({
            method: "GET",
            url: "json/cds_swagger.json"
        }).success(function(json) {
            console.log(json), vm.setInputJson(json);
        }).error(function() {
            vm.setInputJson("Invalid JSON");
        });
    }, vm.setInputJson = function(json) {
        console.log($("#api_spec")), $("#api_spec").val(JSON.stringify(json, null, 4));
    }, vm.getInputJson = function() {
        return JSON.parse($("#api_spec").val());
    }, vm.setJson = function(json, skipValidation) {
        return json ? (vm.diff = {}, json.envelope || (json.envelope = Swagger.defaultEnvelope), 
        json.parameters || (json.parameters = ApiDesigner.defaultGlobalParams), json.responseMessages || (json.responseMessages = ApiDesigner.defaultResponseCodes), 
        json.jsonp || (json.jsonp = ApiDesigner.defaultJsonp), Swagger.prepLegacy(json), 
        skipValidation || (vm.errors = SwaggerValidate.validate(json)), vm.setInputJson(angular.copy(json)), 
        vm.originalJson = angular.copy(json), Swagger.prepSwagger(json), Swagger.prepLegacyApi(json), 
        Swagger.prepDesigner(json), json.apis = Utility.mapToArray(json.apis, "path"), json.models = Utility.mapToArray(json.models, "name"), 
        json.envelope.properties = Utility.mapToArray(json.envelope.properties, "name"), 
        vm.json = json, void Utility.log(json)) : void vm.errors.push("Invalid JSON.");
    }, vm.generateEditorFromInput = function() {
        try {
            var json = vm.getInputJson();
        } catch (ex) {
            throw new Error("String was not valid JSON");
        }
        vm.setJson(json);
    }, vm.generateEditorFromLocalStorage = function(basePath) {
        ApiService.load(basePath).then(function(json) {
            json ? vm.setJson(json) : vm.errors.push("Problem loading JSON from LocalStorage.");
        });
    }, vm.generateEditorFromFile = function(json) {
        vm.setJson(json);
    }, vm.removeApiFromLocalStorage = function(basePath) {
        return ApiService.remove(basePath).then(function() {
            ApiService.getLocalApis().then(function(apis) {
                vm.localApis = apis;
            });
        }), !1;
    }, vm.saveJson = function() {
        var json = angular.copy(vm.json);
        json.models = Utility.arrayToMap(json.models, "name"), Swagger.deleteEnvelopeModels(json.models), 
        json.envelope.properties = Utility.arrayToMap(json.envelope.properties, "name"), 
        Swagger.postProcess(json), Swagger.addPathParameters(json), Swagger.addPostDataParameters(json), 
        Swagger.addGlobalParameters(json), vm.errors = SwaggerValidate.validate(json), Utility.log(json), 
        vm.errors.length || (vm.setInputJson(json), ApiService.save(json.basePath, json).then(function(response) {
            response && response.objectId && (vm.json.id = response.objectId), ApiService.getLocalApis().then(function(apis) {
                vm.localApis = apis;
            });
        })), vm.originalJson && (vm.diff = SwaggerDiff.diff(vm.originalJson, json));
    }, init();
}

function DirectoryCtrl($scope, $http, ApiService) {
    $scope.templates = {
        directory: "templates/directory.html"
    }, $scope.local = [], ApiService.getLocalApis().then(function(localApis) {
        _.each(localApis, function(api) {
            api.link = api.basePath;
        }), $scope.local = localApis;
    }), $scope.localParam = "ls", $scope.published = [], ApiService.getPublishedApis().then(function(apis) {
        $scope.published = _.filter(apis, function(api) {
            return !api.error;
        });
    }), $scope.publishedParam = "json";
}

function DocsCtrl($scope, $http, $location, $anchorScroll, Swagger, SwaggerValidate, ApiDesigner, ApiService) {
    $scope.setJson = function(json) {
        try {
            Swagger.prepLegacy(json), $scope.errors = SwaggerValidate.validate(json);
        } catch (ex) {
            $scope.errors = [ "Validation failed! " + ex.name + " - " + ex.message ];
        }
        Swagger.prepSwagger(json), Swagger.prepDocs(json), $scope.json = json, $scope.responseMessages = json.responseMessages ? json.responseMessages : ApiDesigner.defaultResponseCodes;
    }, $scope.errors = [], $scope.templates = {
        docs: "templates/docs.html"
    }, ApiService.getById(ApiService.determineId(), ApiService.determineLoadType()).then(function(json) {
        $scope.setJson(json);
    })["catch"](function(errorThrown) {
        $scope.errors.push(errorThrown.message), $scope.setJson(ApiDesigner.blankJson());
    }), $scope.scrollTo = function(id) {
        $location.hash(id), $anchorScroll();
    };
}

function ResponseModelCtrl($scope) {
    $scope.viewModelDetails = function(models, modelName) {
        return $scope.model = models[modelName], $scope.path.push(modelName), !1;
    }, $scope.viewModelByDepth = function(models, depth) {
        var modelName = $scope.path[depth];
        $scope.path = $scope.path.slice(0, depth), $scope.viewModelDetails(models, modelName);
    };
}

function UsersCtrl($scope, UserService) {
    $scope.templates = {
        users: "app/components/users/users.html"
    }, $scope.user = {}, $scope.users = [], $scope.errors = [], $scope.privileges = {
        view: !0,
        edit: !1,
        "delete": !1,
        publish: !1,
        admin: !1
    }, $scope.createUser = function() {
        $scope.user.username && UserService.create($scope.user.username).success(function() {
            $scope.success = !0;
        });
    }, $scope.editUserPrivileges = function() {
        $scope.loading = !0, $scope.success = !1, $scope.user.username && UserService.edit($scope.user.username, $scope.user.privileges).success(function(response) {
            $scope.success = !0, $scope.user = response;
        }).error(function(message) {
            $scope.errors.push(message);
        })["finally"](function() {
            $scope.loading = !1;
        });
    }, this.viewUser = function() {
        $scope.loading = !0, $scope.success = !1, UserService.get($scope.user.username).success(function(response) {
            $scope.success = !0, $scope.user = response;
        }).error(function(message) {
            $scope.errors.push(message);
        })["finally"](function() {
            $scope.loading = !1;
        });
    }, this.getUsers = function() {
        UserService.getList().success(function(response) {
            response.error ? $scope.errors.push("Error fetching users: " + response.message) : $scope.users = response;
        }).error(function(message) {
            $scope.errors.push(message);
        });
    }, this.getUsers(), $scope.viewUser = this.viewUser, $scope.loadUser = function(username) {
        return $scope.user.username = username, $scope.viewUser(), !1;
    };
}

function PageCtrl($scope, AuthService) {
    $scope.templates = {
        menu: "partials/menu.html",
        footer: "partials/footer.html"
    }, $scope.page = "users", $scope.loggedIn = AuthService.getToken(), AuthService.getPrivileges().then(function(privileges) {
        $scope.privileges = {}, _.each(privileges, function(privilege) {
            $scope.privileges[privilege] = !0;
        });
    }), $scope.openLogin = AuthService.openLogin, $scope.getToken = function() {
        AuthService.getToken();
    }, $scope.logout = function() {
        AuthService.logout();
    };
}

function SdkCtrl($scope, Swagger, ApiService) {
    ApiService.getById(ApiService.determineId(), ApiService.determineLoadType()).then(function(json) {
        Swagger.prepSwagger(json), Swagger.prepResponses(json, !0, !0), json.resources = Swagger.resourceRelationships(json), 
        Swagger.prepSDK(json);
        var sdkTemplate = _.template($("#sdk-template").html());
        $scope.sdk = sdkTemplate(json);
    });
}

angular.module("apis-application.controllers").controller("ConsoleCtrl", [ "$scope", "$http", "$location", "Swagger", "SwaggerValidate", "ApiService", "Validators", "Utility", ConsoleCtrl ]), 
angular.module("apis-application.controllers").controller("DesignerCtrl", [ "$scope", "$http", "$location", "$anchorScroll", "Swagger", "SwaggerValidate", "SwaggerDiff", "ApiDesigner", "ApiService", "Utility", "Validators", DesignerCtrl ]), 
angular.module("apis-application.controllers").controller("DirectoryCtrl", [ "$scope", "$http", "ApiService", "AuthService", DirectoryCtrl ]), 
angular.module("apis-application.controllers").controller("DocsCtrl", [ "$scope", "$http", "$location", "$anchorScroll", "Swagger", "SwaggerValidate", "ApiDesigner", "ApiService", DocsCtrl ]), 
angular.module("apis-application.controllers").controller("ResponseModelCtrl", [ "$scope", ResponseModelCtrl ]), 
angular.module("apis-application.controllers").controller("UsersCtrl", [ "$scope", "UserService", UsersCtrl ]), 
angular.module("apis-application.controllers").controller("PageCtrl", [ "$scope", "AuthService", PageCtrl ]), 
angular.module("apis-application.controllers").controller("SdkCtrl", [ "$scope", "Swagger", "ApiService", SdkCtrl ]);