/*! apis 2015-05-15 */
!function(angular) {
    function apiDesign() {
        return {
            restrict: "E",
            scope: {
                api: "=",
                json: "="
            },
            controller: [ "$scope", "ApiDesigner", "Swagger", "Utility", "Validators", apiDesignController ],
            controllerAs: "vm",
            bindToController: !0,
            templateUrl: "templates/api-design.html?"
        };
    }
    function apiDesignController($scope, ApiDesigner, Swagger, Utility, Validators) {
        var vm = this;
        vm.utility = Utility, vm.validators = Validators, vm.displayTypes = _.keys(Swagger.typesAndFormats), 
        vm.displayTypesNoObject = _.reject(vm.displayTypes, function(type) {
            return "object" === type;
        }), vm.addParameter = function(parameters) {
            parameters.push(ApiDesigner.blankParameter());
        }, vm.isPagedToggle = function(operation) {
            operation.isPaged && (operation.defaultPageSize = 20, operation.maxPageSize = 100);
        }, vm.supportsPostData = function(method) {
            return Swagger.methodSupportsPostData(method);
        }, vm.changeParentModel = function(api) {
            api.child || (api.operations.GET && (api.operations.GET.displayType = "object", 
            api.operations.GET.displayModel = api.parentModel), api.operations.PUT && (api.operations.PUT.postDataModel = api.parentModel), 
            api.operations.PATCH && (api.operations.PATCH.postDataModel = api.parentModel), 
            api.operations.POST && (api.operations.POST.postDataModel = api.parentModel)), api.parentModelIdProperty = Swagger.getModelIdByName(vm.json.models, api.parentModel);
        };
    }
    angular.module("apis-application.directives").directive("apiDesign", apiDesign);
}(window.angular), function(angular) {
    "use strict";
    function apiDocs() {
        return {
            restrict: "E",
            controller: [ apiDocsController ],
            templateUrl: "templates/api-docs.html"
        };
    }
    function apiDocsController() {}
    angular.module("apis-application.directives").directive("apiDocs", apiDocs);
}(window.angular), function(angular) {
    "use strict";
    function apisDesign() {
        return {
            restrict: "E",
            scope: {
                json: "="
            },
            controller: [ "$scope", "Swagger", "ApiDesigner", "Utility", "Validators", ApisDesignController ],
            controllerAs: "vm",
            bindToController: !0,
            templateUrl: "templates/apis-design.html?"
        };
    }
    function ApisDesignController($scope, Swagger, ApiDesigner, Utility, Validators) {
        function toggleOperation(addSupport, operations, method, pathType) {
            addSupport ? addOperation(operations, method, pathType) : removeOperation(operations, method);
        }
        function addOperation(operations, method, pathType) {
            operations[method] || (operations[method] = ApiDesigner.blankOperation(pathType, method));
        }
        function removeOperation(operations, method) {
            vm.utility.remove(operations, method);
        }
        var vm = this;
        vm.json = $scope.json, vm.utility = Utility, vm.validators = Validators, vm.addApi = function() {
            vm.api = ApiDesigner.blankApi(1);
        }, vm.editApi = function(api, idx) {
            vm.api = angular.copy(api), vm.previousApiIdx = idx;
        }, vm.saveApiUpdate = function() {
            var type = parseInt(vm.api.type), operations = vm.api.operations, supports = vm.api.supports;
            vm.api.path = Swagger.getPathFromSections(type, vm.api.parent, vm.api.child), vm.api.pathUsesId = Swagger.pathTypeNeedsId(type), 
            vm.api.pathUsesChild = Swagger.pathTypeNeedsChild(type), _.each(Swagger.methods, function(method) {
                toggleOperation(supports[method], operations, method, type);
            }), vm.previousApiIdx >= 0 ? (vm.json.apis[vm.previousApiIdx] = vm.api, vm.previousApiIdx = -1) : vm.json.apis.push(vm.api), 
            vm.api.parentModel && vm.changeParentModel(vm.api);
        }, vm.cancelApiUpdate = function() {
            vm.api = {}, vm.previousApiIdx = -1;
        }, vm.unsetIncorrectOperations = function(pathType, api) {
            switch (api && api.supports || console.log(api), pathType) {
              case "1":
                api.supports.PUT = !1, api.supports.PATCH = !1;
                break;

              case "2":
                api.supports.POST = !1;
                break;

              case "3":
                api.supports.PUT = !1, api.supports.PATCH = !1, api.supports.POST = !1;
                break;

              case "4":
                api.supports.POST = !1, api.supports.DELETE = !1;
                break;

              default:
                throw new Error("Unrecognised path type.");
            }
        }, vm.parentType = function(api) {
            api.child || api.operations.GET && (api.operations.GET.displayType = api.parentType);
        };
    }
    angular.module("apis-application.directives").directive("apisDesign", apisDesign);
}(window.angular), function(angular) {
    "use strict";
    function authDesign() {
        return {
            restrict: "E",
            scope: {
                auths: "="
            },
            controller: [ authDesignController ],
            controllerAs: "vm",
            bindToController: !0,
            templateUrl: "templates/auth-design.html?"
        };
    }
    function authDesignController() {}
    angular.module("apis-application.directives").directive("authDesign", authDesign);
}(window.angular), function(angular) {
    "use strict";
    function diffReport() {
        return {
            restrict: "E",
            controller: [ diffReportController ],
            templateUrl: "templates/diff-report.html"
        };
    }
    function diffReportController() {}
    angular.module("apis-application.directives").directive("diffReport", diffReport);
}(window.angular), angular.module("apis-application.directives").directive("directoryTable", function() {
    return {
        restrict: "A",
        scope: {
            apis2: "=apiList",
            urlParam: "=urlParam"
        },
        templateUrl: "templates/directory-table.html"
    };
}), function(angular) {
    function envelopeDesign() {
        return {
            restrict: "E",
            scope: {
                model: "=",
                models: "="
            },
            controller: [ "ApiDesigner", "Utility", "Swagger", envelopeDesignController ],
            controllerAs: "vm",
            bindToController: !0,
            templateUrl: "templates/envelope-design.html?"
        };
    }
    function envelopeDesignController(ApiDesigner, Utility, Swagger) {
        var vm = this;
        vm.displayTypes = _.keys(Swagger.typesAndFormats), vm.remove = Utility.remove, vm.addEnvelopeProperty = function() {
            $scope.json.envelope.properties.push(ApiDesigner.blankProperty());
        };
    }
    angular.module("apis-application.directives").directive("envelopeDesign", envelopeDesign);
}(window.angular), function(angular) {
    function errorsDesign() {
        return {
            restrict: "E",
            scope: {
                models: "="
            },
            controller: [ "ApiDesigner", "Validators", "Swagger", "Utility", errorsDesignController ],
            controllerAs: "vm",
            bindToController: !0,
            templateUrl: "templates/errors-design.html?"
        };
    }
    function errorsDesignController(ApiDesigner, Validators, Swagger, Utility) {
        var vm = this;
        vm.remove = Utility.remove, vm.validators = Validators, vm.displayTypes = _.keys(Swagger.typesAndFormats), 
        vm.addProperty = function(model) {
            model.properties.push(ApiDesigner.blankProperty());
        }, vm.editModel = function(model, idx) {
            vm.model = angular.copy(model), vm.previousModelIdx = idx;
        };
    }
    angular.module("apis-application.directives").directive("errorsDesign", errorsDesign);
}(window.angular), function(angular) {
    "use strict";
    function footer() {
        return {
            restrict: "E",
            templateUrl: "templates/footer.html"
        };
    }
    angular.module("apis-application.directives").directive("footer", footer);
}(window.angular), function(angular) {
    function globalParamsDesign() {
        return {
            restrict: "E",
            scope: {
                params: "=",
                models: "="
            },
            controller: [ "ApiDesigner", "Validators", "Utility", "Swagger", globalParamsDesignController ],
            controllerAs: "vm",
            bindToController: !0,
            templateUrl: "templates/global-params-design.html?"
        };
    }
    function globalParamsDesignController(ApiDesigner, Validators, Utility, Swagger) {
        var vm = this;
        vm.validators = Validators, vm.remove = Utility.remove, vm.displayTypes = _.keys(Swagger.typesAndFormats), 
        vm.displayTypesNoObject = _.reject(vm.displayTypes, function(type) {
            return "object" === type;
        }), vm.globalParamTypes = [ "query", "header" ], vm.isPathParam = function(parameter) {
            return "id" === parameter.name && "path" === parameter.paramType;
        }, vm.addParameter = function(parameters) {
            parameters.push(ApiDesigner.blankParameter());
        };
    }
    angular.module("apis-application.directives").directive("globalParamsDesign", globalParamsDesign);
}(window.angular), function(angular) {
    function httpCodesDesign() {
        return {
            restrict: "E",
            scope: {
                codes: "=",
                models: "="
            },
            controller: [ "ApiDesigner", httpCodesDesignController ],
            controllerAs: "vm",
            bindToController: !0,
            templateUrl: "templates/http-codes-design.html?"
        };
    }
    function httpCodesDesignController(ApiDesigner) {
        this.addResponseCode = function(codes) {
            codes.push(ApiDesigner.blankResponseMessage());
        };
    }
    angular.module("apis-application.directives").directive("httpCodesDesign", httpCodesDesign);
}(window.angular), function(angular) {
    "use strict";
    function jsonpDesign() {
        return {
            restrict: "E",
            scope: {
                jsonp: "=",
                models: "=",
                params: "="
            },
            controller: [ jsonpDesignController ],
            controllerAs: "vm",
            bindToController: !0,
            templateUrl: "templates/jsonp-design.html?"
        };
    }
    function jsonpDesignController() {}
    angular.module("apis-application.directives").directive("jsonpDesign", jsonpDesign);
}(window.angular), angular.module("apis-application.directives").directive("markdown", function() {
    var converter = new Showdown.converter(), link = function(scope, element, attrs, model) {
        var render = function() {
            var htmlText = "";
            model.$modelValue && (htmlText = converter.makeHtml(model.$modelValue)), element.html(htmlText);
        };
        scope.$watch(attrs.ngModel, render), render();
    };
    return {
        restrict: "E",
        require: "ngModel",
        link: link
    };
}), function(angular) {
    "use strict";
    function menu() {
        return {
            restrict: "E",
            replace: !0,
            controller: [ menuController ],
            templateUrl: "templates/menu.html"
        };
    }
    function menuController() {}
    angular.module("apis-application.directives").directive("menu", menu);
}(window.angular), function(angular) {
    "use strict";
    function metaDesign() {
        return {
            restrict: "E",
            scope: {
                info: "=",
                json: "=",
                version: "="
            },
            controller: [ metaDesignController ],
            controllerAs: "vm",
            bindToController: !0,
            templateUrl: "templates/meta-design.html?"
        };
    }
    function metaDesignController() {}
    angular.module("apis-application.directives").directive("metaDesign", metaDesign);
}(window.angular), function(angular) {
    function modelDesign() {
        return {
            restrict: "E",
            scope: {
                model: "=",
                models: "="
            },
            controller: [ "$scope", "ApiDesigner", "Validators", "Swagger", "Utility", modelDesignController ],
            controllerAs: "vm",
            bindToController: !0,
            templateUrl: "templates/model-design.html?"
        };
    }
    function modelDesignController($scope, ApiDesigner, Validators, Swagger, Utility) {
        var vm = this;
        vm.validators = Validators, vm.remove = Utility.remove, vm.displayTypes = _.keys(Swagger.typesAndFormats), 
        vm.addProperty = function(model) {
            model.properties.push(ApiDesigner.blankProperty());
        }, vm.toggleRequest = function(used, required) {
            used || (required = !1);
        };
    }
    angular.module("apis-application.directives").directive("modelDesign", modelDesign);
}(window.angular), function(angular) {
    "use strict";
    function modelValuesForm() {
        return {
            restrict: "E",
            scope: {
                property: "=",
                model: "=",
                models: "="
            },
            controller: [ modelValuesFormController ],
            templateUrl: "templates/model-values-form.html"
        };
    }
    function modelValuesFormController() {}
    angular.module("apis-application.directives").directive("modelValuesForm", modelValuesForm);
}(window.angular), function(angular) {
    function modelsDesign() {
        return {
            restrict: "E",
            scope: {
                models: "=",
                json: "="
            },
            controller: [ "$scope", "ApiDesigner", "Utility", "Validators", modelsDesignController ],
            controllerAs: "vm",
            bindToController: !0,
            templateUrl: "templates/models-design.html?"
        };
    }
    function modelsDesignController($scope, ApiDesigner, Utility, Validators) {
        var vm = this;
        vm.json = $scope.json, vm.utility = Utility, vm.validators = Validators, vm.addModel = function() {
            var model = ApiDesigner.blankModel(), property = ApiDesigner.blankProperty();
            property.name = "id", property.description = "The id of the model.", property.isId = !0, 
            model.properties.push(property), vm.model = model;
        }, vm.editModel = function(model, idx) {
            vm.model = angular.copy(model), vm.previousModelIdx = idx;
        }, vm.saveModelUpdate = function() {
            if (!(vm.json.models instanceof Array)) throw new Error("json.models should be an array at this point.");
            if (vm.previousModelIdx) {
                if ("number" != typeof vm.previousModelIdx) throw new Error("previousModelIdx should be a number");
                var oldName = vm.json.models[vm.previousModelIdx].name, newName = vm.model.name;
                vm.json.models[vm.previousModelIdx] = vm.model, vm.previousModelIdx = !1, _.each(vm.json.apis, function(api) {
                    api.parentModel === oldName && (api.parentModel = newName), _.each(api.operations, function(operation) {
                        operation.displayModel === oldName && (operation.displayModel = newName), operation.postDataModel === oldName && (operation.postDataModel = newName);
                    });
                }), _.each(vm.json.models, function(model) {
                    _.each(model.properties, function(property) {
                        property.displayModel === oldName && (property.displayModel = newName);
                    });
                }), _.each(vm.json.envelope.properties, function(property) {
                    property.displayModel === oldName && (property.displayModel = newName);
                }), _.each(vm.json.responseMessages, function(responseMessage) {
                    responseMessage.responseModel === oldName && (responseMessage.responseModel = newName);
                }), vm.json.jsonp.errorModel === oldName && (vm.json.jsonp.errorModel = newName);
            } else vm.json.models.push(vm.model);
        }, vm.cancelModelUpdate = function() {
            vm.model = {}, vm.previousModelIdx = !1;
        }, vm.sortByName = function(array) {
            array = _.sortBy(array, function(iter) {
                return iter.name;
            });
        };
    }
    angular.module("apis-application.directives").directive("modelsDesign", modelsDesign);
}(window.angular), function(angular) {
    "use strict";
    function requestDocs() {
        return {
            restrict: "E",
            controller: [ requestDocsController ],
            templateUrl: "templates/request-docs.html"
        };
    }
    function requestDocsController() {}
    angular.module("apis-application.directives").directive("requestDocs", requestDocs);
}(window.angular), function(angular) {
    "use strict";
    function requestFormatDesign() {
        return {
            restrict: "E",
            controller: [ requestFormatDesignController ],
            templateUrl: "templates/request-format-design.html"
        };
    }
    function requestFormatDesignController() {}
    angular.module("apis-application.directives").directive("requestFormatDesign", requestFormatDesign);
}(window.angular), function(angular) {
    "use strict";
    function responseDocs() {
        return {
            restrict: "E",
            controller: [ responseDocsController ],
            templateUrl: "templates/response-docs.html"
        };
    }
    function responseDocsController() {}
    angular.module("apis-application.directives").directive("responseDocs", responseDocs);
}(window.angular), function(angular) {
    function responseHeadersDesign() {
        return {
            restrict: "E",
            scope: {
                headers: "="
            },
            controller: [ "ApiDesigner", responseHeadersDesignController ],
            controllerAs: "vm",
            bindToController: !0,
            templateUrl: "templates/response-headers-design.html?"
        };
    }
    function responseHeadersDesignController(ApiDesigner) {
        var vm = this;
        vm.addResponseHeader = function(headers) {
            headers.push(ApiDesigner.blankResponseHeader());
        };
    }
    angular.module("apis-application.directives").directive("responseHeadersDesign", responseHeadersDesign);
}(window.angular), function(angular) {
    function testDesign() {
        return {
            restrict: "E",
            controller: [ "Swagger", "SwaggerValidate", "ApiService", "ApiDesigner", "Utility", "Validators", TestDesignController ],
            controllerAs: "vm",
            templateUrl: "templates/test-design.html"
        };
    }
    function TestDesignController(Swagger, SwaggerValidate, ApiService, ApiDesigner, Utility, Validators) {
        var vm = this;
        vm.errors = [], vm.test = {
            method: "GET",
            responseMessage: "200"
        }, vm.method = "GET", vm.operation = {}, vm.json = {}, vm.path = {}, vm.accessToken = "", 
        vm.templates = {
            model: "templates/model-values-form.html",
            tests: "../app/components/tests/tests.html"
        }, vm.testSuite = {
            name: "Example",
            tests: [ {
                method: "GET",
                path: "/albums",
                params: [ {
                    name: "search",
                    value: "OK"
                } ]
            }, {
                method: "GET",
                path: "/albums/{id}",
                params: [ {
                    name: "id",
                    value: "1"
                } ],
                expectations: [ {
                    path: [ "data", "name" ],
                    value: "Kid A"
                }, {
                    path: [ "data", "coverImg" ],
                    value: "example/images/kid-a.jpg"
                } ]
            } ]
        }, vm.addTestSuite = function() {
            var testSuite = {
                name: "Example",
                iterationLimit: 5,
                tests: []
            };
            vm.json.testSuites.push(testSuite), vm.testSuite = testSuite;
        }, vm.editTestSuite = function(testSuite) {
            vm.testSuite = testSuite;
        }, vm.prepareTests = function(tests, apis, models, responseMessages) {
            _.each(tests, function(test) {
                vm.prepareTest(test, apis, models, responseMessages);
            });
        }, vm.prepareTest = function(test, apis, models, responseMessages) {
            test.operation = angular.copy(Swagger.getOperationByPathAndMethod(apis, test.path, test.method)), 
            vm.copyResponseModelToOperation(test.operation, models, responseMessages, test.responseCode), 
            vm.copyModelsToParameters(test.operation, models), vm.copyPostModelToOperation(test.operation, models), 
            test.expectations && (vm.resetExamples(test.operation.response.model), vm.overrideExampleWithExpectation(test.expectations, test.operation.response)), 
            test.postData && (vm.resetExamples(test.operation.request.model), vm.overrideExampleWithExpectation(test.postData, test.operation.request)), 
            test.parameters && (_.each(test.operation.parameters, function(parameter) {
                delete parameter.example;
            }), _.each(test.parameters, function(testParameter) {
                var operationParam = _.find(test.operation.parameters, function(iter) {
                    return iter.name === testParameter.name;
                });
                operationParam.example = testParameter.value;
            }));
        }, vm.copyResponseModelToOperation = function(operation, models, responseMessages, responseCode) {
            operation.response = {
                model: angular.copy(Swagger.getModelByResponseType(operation, models, responseMessages, responseCode))
            }, Swagger.removeModelPropertiesBasedOnUsage(operation.response.model, operation.method, !0);
        }, vm.copyModelsToParameters = function(operation, models) {
            _.each(operation.parameters, function(parameter) {
                parameter.$ref ? parameter.model = angular.copy(Swagger.getModelByName(models, parameter.$ref)) : parameter.items && parameter.items.ref && (parameter.model = angular.copy(Swagger.getModelByName(models, parameter.items.$ref))), 
                parameter.model && Swagger.removeModelPropertiesBasedOnUsage(parameter.model, operation.method, !1);
            });
        }, vm.copyPostModelToOperation = function(operation, models) {
            operation.postDataModel && (operation.request = {
                model: angular.copy(Swagger.getModelByName(models, operation.postDataModel))
            }, Swagger.removeModelPropertiesBasedOnUsage(operation.request.model, operation.method, !1));
        }, vm.setJson = function(json) {
            Utility.log("Validating Swagger");
            try {
                Swagger.prepLegacy(json), vm.errors = SwaggerValidate.validate(json);
            } catch (ex) {
                Utility.log("Validation failed! " + ex.name + " - " + ex.message);
            }
            Swagger.prepSwagger(json), vm.json = json, json.testSuites && (vm.testSuite = json.testSuites[0]), 
            vm.responseMessages = vm.json.responseMessage, _.each(vm.json.models, function(model) {
                model.properties = Utility.arrayToMap(model.properties, "name");
            }), vm.flatModels = angular.copy(vm.json.models), Swagger.flattenModels(vm.flatModels), 
            vm.prepareTests(vm.testSuite.tests, vm.json.apis, vm.flatModels, vm.json.responseMessages);
        }, ApiService.getById(ApiService.determineId(), ApiService.determineLoadType()).then(function(json) {
            vm.setJson(json);
        })["catch"](function(errorThrown) {
            vm.errors.push(errorThrown.message), vm.setJson(ApiDesigner.blankJson());
        }), vm.changePath = function() {
            if (!vm.json.apis[vm.test.path]) throw Utility.log(vm.json.apis), new Error("Path not found: " + vm.test.path);
            vm.api = vm.json.apis[vm.test.path], vm.api.operations[vm.test.method] && (vm.operation = vm.api.operations[vm.test.method]), 
            vm.test.method || (vm.test.method = _.find(vm.api.operations, function() {
                return !0;
            }).method), vm.updateResponseMessages();
        }, vm.changeMethod = function() {
            if (!vm.api.operations[vm.method]) throw new Error("Error");
            vm.operation = vm.api.operations[vm.method], vm.updateResponseMessages();
        }, vm.updateResponseMessages = function() {
            vm.responseMessages = vm.operation.responseMessages && vm.operation.responseMessages.length ? vm.operation.responseMessages : vm.json.responseMessages, 
            vm.test.responseCode || vm.responseMessages.length && (vm.test.responseCode = vm.responseMessages[0].code);
        }, vm.buildTestScript = function(tests) {
            vm.buildParams(tests), vm.buildExpectations(tests), vm.buildPostModels(tests);
        }, vm.buildExpectations = function(tests) {
            _.each(tests, function(test) {
                test.expectations = [], Swagger.buildExpectationsFromModelExamples(test.expectations, [], test.operation.response.model);
            });
        }, vm.buildPostModels = function(tests) {
            _.each(tests, function(test) {
                if (Swagger.methodSupportsPostData(test.method)) {
                    if (!test.operation.request.model) throw new Error("Post model should have been copied to the operation");
                    test.postData = [], Swagger.buildExpectationsFromModelExamples(test.postData, [], test.operation.request.model);
                }
            }), vm.convertPostData(tests);
        }, vm.convertPostData = function(tests) {
            _.each(tests, function(test) {
                test.postData && (test.post = Swagger.convertExpectationsToObject(test.postData));
            });
        }, vm.overrideExampleWithExpectation = function(valueList, modelOwner) {
            if (!modelOwner.model) throw Utility.log(modelOwner), new Error("modelOwner must have a model property.");
            if ($.isArray(modelOwner.model.properties)) throw new Error("Test model properties should be a map.");
            _.each(valueList, function(expectation) {
                var pathSoFar = modelOwner;
                _.each(expectation.path, function(propertyName) {
                    pathSoFar.model.properties && pathSoFar.model.properties[propertyName] && (pathSoFar = pathSoFar.model.properties[propertyName]);
                }), pathSoFar.expectedInResponses = !0, expectation.value && (pathSoFar.example = expectation.value);
            });
        }, vm.resetExamples = function(model) {
            _.each(model.properties, function(property) {
                property.example && delete property.example, property.expectedInResponses && delete property.expectedInResponses, 
                property.model && vm.resetExamples(property.model);
            });
        }, vm.buildParams = function(tests) {
            _.each(tests, function(test) {
                test.parameters = [], _.each(test.operation.parameters, function(parameter) {
                    parameter.example && test.parameters.push({
                        name: parameter.name,
                        value: parameter.example,
                        paramType: parameter.paramType
                    });
                });
            });
        }, vm.tidyTests = function(tests) {
            _.each(tests, function(test) {
                delete test.operation, delete test.visible, delete test.post;
            });
        }, vm.addTest = function() {
            vm.test = {}, vm.previousTestIdx = -1;
            var firstApi = _.find(vm.json.apis, function() {
                return !0;
            });
            vm.test.path = firstApi.path, vm.changePath();
        }, vm.editTest = function(test, idx) {
            vm.test = test, vm.changePath(), vm.changeMethod(), vm.previousTestIdx = idx;
        }, vm.saveTestUpdate = function() {
            vm.test.visible = !0, vm.previousTestIdx >= 0 ? (vm.prepareTest(vm.test, vm.json.apis, vm.flatModels, vm.json.responseMessages), 
            vm.testSuite.tests[vm.previousTestIdx] = vm.test, vm.previousTestIdx = -1) : (vm.prepareTest(vm.test, vm.json.apis, vm.flatModels, vm.json.responseMessages), 
            vm.testSuite.tests.push(vm.test));
        }, vm.cancelTestUpdate = function() {
            vm.test = {}, vm.previousTestIdx = -1;
        }, vm.saveTests = function() {
            vm.buildTestScript(vm.testSuite.tests);
            var json = angular.copy(vm.json);
            _.each(json.testSuites, function(testSuite) {
                vm.tidyTests(testSuite.tests);
            }), vm.saveJson(json);
        }, vm.saveJson = function(json) {
            var jsonCopy = angular.copy(json);
            Swagger.deleteEnvelopeModels(jsonCopy.models), jsonCopy.envelope.properties = Utility.arrayToMap(jsonCopy.envelope.properties, "name"), 
            Swagger.postProcess(jsonCopy), json.apis = Utility.mapToArray(jsonCopy.apis), vm.errors = SwaggerValidate.validate(jsonCopy), 
            Utility.log(jsonCopy), vm.errors.length || ApiService.save(jsonCopy.basePath, jsonCopy), 
            $("#api_spec").val(JSON.stringify(jsonCopy, null, 4));
        }, vm.validators = Validators, vm.up = Utility.arrayUp, vm.down = Utility.arrayDown, 
        vm.top = Utility.arrayTop, vm.bottom = Utility.arrayBottom, vm.remove = Utility.remove;
    }
    angular.module("apis-application.directives").directive("testDesign", testDesign), 
    angular.module("apis-application.controllers").controller("TestDesignController", TestDesignController), 
    TestDesignController.$inject = [ "Swagger", "SwaggerValidate", "ApiService", "ApiDesigner", "Utility", "Validators" ];
}(window.angular), function(angular) {
    "use strict";
    function throttlingDesign() {
        return {
            restrict: "E",
            scope: {
                throttling: "="
            },
            controller: [ throttlingDesignController ],
            controllerAs: "vm",
            bindToController: !0,
            templateUrl: "templates/throttling-design.html?"
        };
    }
    function throttlingDesignController() {}
    angular.module("apis-application.directives").directive("throttlingDesign", throttlingDesign);
}(window.angular);