

/**
 * DO NOT EDIT THIS FILE, this file was automatically generated, any edits 
 * will be overwritten when the file is regenerated.
 * 
 * This is an SDK containing AngularJS factories for accessing the restful web 
 * service at /AlchemyApi/example - The SDK was generated for 
 * version 1 of the API.
 * 
 * To use the services within your AngularJS application, import into your 
 * application and controllers as follows:
 * 
 *   angular.module('YourApp', ['sdkService'])
 *   .controller('YourController', ['$scope', 'Albums',
 *       function($scope, Albums) {
 *           $scope.albums = Albums.get({id: 1 });
 *       }
 *   ]);
 *
 * To create an object use the following pattern. Note, when calling functions 
 * directly on resource instances the functions are prefixed with '$', so 
 * 'create' becomes '$create':
 * 
 *  var albums = new Albums();
 *  albums.example = "example";
 *  albums.$create(function(response) { }, function(error) { });
 *  
 * The object returned from a get() is a resource itself, so you can update it 
 * directly and issue an update. By nesting the second request in the response
 * handler we have full access to the object returned from the first call.
 *  
 *  Albums.get({id: 1}, function(albums) {
 *      albums.example = "example";
 *      albums.$update(function(response) { }, function(error) { });
 *  });
 * 
 * Angular even returns resources for array responses so you can do the 
 * following:
 * 
 *  Albums.getList({}, function(albums) {
 *      var object = albums[0];
 *      object.example = "example";
 *      object.$update(function(response) { }, function(error) { });
 *  });
 *  
 * If for some reason the object you are dealing with is not a resource, you can
 * use an alternative formulation to issue an update:
 * 
 *  Albums.update(
 *      {id: object.id}, object, function(response) { }, function(error) { }
 *  );
 */
var sdkService = angular.module('sdkService', ['ngResource']);

/**
 * @name sdkService.envelopeHandler
 * Handler for methods returning a response envelope, if an error is detected
 * it will be thrown, otherwise the nested response will be returned.
 * 
 * If you prefer to access the full response, override this function.
 * 
 * @param {string} data The raw response data
 * @param {object} header An object containing any response headers
 * @returns {object} Either an Error object or the response
 */
sdkService.envelopeHandler = function(json, headers) {
    if (json) {
        if (json.error) {
            throw new Error(json.error.message);
        }
        return json.data;
    }
    return {};
};

/**
 * Factory for interacting with Albums objects and their
 * related descendents.
 */
sdkService.factory('Albums', ['$resource', function($resource) {
    return $resource(':_parent/:id/:_child', {_parent: 'albums'}, {
        get: {
            method: 'GET',
            responseType: 'json',
            params: {id: '@id'},
            transformResponse: sdkService.envelopeHandler
        },
        update: {
            method: 'PUT',
            responseType: 'json',
            params: {id: '@id'},
            transformResponse: sdkService.envelopeHandler
        },
        getList: {
            method: 'GET',
            responseType: 'json',
            transformResponse: sdkService.envelopeHandler,
            isArray: true
        }, 
        getBySongsId: {
            method: 'GET',
            responseType: 'json',
            params: {id: 'REQUIRED', _parent: 'songs', _child: 'albums'},
            transformResponse: sdkService.envelopeHandler,
            isArray: true
        },
        getByArtistsId: {
            method: 'GET',
            responseType: 'json',
            params: {id: 'REQUIRED', _parent: 'artists', _child: 'albums'},
            transformResponse: sdkService.envelopeHandler,
            isArray: true
        },
    });
}]);

/**
 * Factory for interacting with Songs objects and their
 * related descendents.
 */
sdkService.factory('Songs', ['$resource', function($resource) {
    return $resource(':_parent/:id/:_child', {_parent: 'songs'}, {
        create: {
            method: 'POST',
            responseType: 'json',
            transformResponse: sdkService.envelopeHandler
        },
        get: {
            method: 'GET',
            responseType: 'json',
            params: {id: '@id'},
            transformResponse: sdkService.envelopeHandler
        },
        update: {
            method: 'PUT',
            responseType: 'json',
            params: {id: '@id'},
            transformResponse: sdkService.envelopeHandler
        },
        delete: {
            method: 'DELETE',
            responseType: 'json',
            params: {id: '@id'},
            transformResponse: sdkService.envelopeHandler
        },
        getList: {
            method: 'GET',
            responseType: 'json',
            transformResponse: sdkService.envelopeHandler,
            isArray: true
        }, 
        getByAlbumsId: {
            method: 'GET',
            responseType: 'json',
            params: {id: 'REQUIRED', _parent: 'albums', _child: 'songs'},
            transformResponse: sdkService.envelopeHandler,
            isArray: true
        },
    });
}]);

/**
 * Factory for interacting with Artists objects and their
 * related descendents.
 */
sdkService.factory('Artists', ['$resource', function($resource) {
    return $resource(':_parent/:id/:_child', {_parent: 'artists'}, {
        get: {
            method: 'GET',
            responseType: 'json',
            params: {id: '@id'},
            transformResponse: sdkService.envelopeHandler
        },
        getList: {
            method: 'GET',
            responseType: 'json',
            transformResponse: sdkService.envelopeHandler,
            isArray: true
        }, 
    });
}]);

